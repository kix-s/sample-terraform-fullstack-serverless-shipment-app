name: Deploy with Terraform

on:
  push:
    paths-ignore:
      - 'README.md'
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    # “At 00:00 on Sunday.”
    - cron: "0 0 * * 0"
  workflow_dispatch:

jobs:
  test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Maven
        run: sudo apt-get install -y maven

      - name: Start LocalStack
        uses: LocalStack/setup-localstack@v0.2.4
        with:
          image-tag: 'latest'
          use-pro: 'true'
          configuration: LS_LOG=trace
          install-awslocal: 'true'
        env:
          LOCALSTACK_AUTH_TOKEN: ${{ secrets.LOCALSTACK_AUTH_TOKEN }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install tflocal
        run: |
          pip install --upgrade terraform-local

      - name: Build project
        run: |
          cd shipment-picture-lambda-validator
          mvn clean package shade:shade

      - name: Deploy using Terraform
        run: |
          cd terraform
          tflocal init
          tflocal plan
          tflocal apply --auto-approve

      - name: Build frontend
        run: |
          cd shipment-list-frontend
          npm install
          CI=false npm run build

      - name: Show LocalStack logs
        if: always()
        run: |
          localstack logs

      - name: Stop LocalStack
        run: |
          localstack stop

      - name: Run Testcontainers tests
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
        run: |
          mvn test -Dtest=dev.ancaghenade.shipmentlistdemo.integrationtests.ShipmentServiceIntegrationTest

      - name: Send a Slack notification
        if: failure() || github.event_name != 'pull_request'
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: "{workflow} has {status_message}"
          message_format: "{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>"
          footer: "Linked Repo <{repo_url}|{repo}> | <{run_url}|View Workflow run>"
          notify_when: "failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Generate a Diagnostic Report
        if: failure()
        run: |
          curl -s localhost:4566/_localstack/diagnose | gzip -cf > diagnose.json.gz

      - name: Upload the Diagnostic Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diagnose.json.gz
          path: ./diagnose.json.gz
